<?php
/*
Generated by Manuigniter v2.0
www.manuigniter.com
 */
use Restserver\Libraries\REST_Controller;

defined('BASEPATH') OR exit('No direct script access allowed');
require APPPATH . '/libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';
class Transporter extends REST_Controller {
	function __construct() {
		parent::__construct();
		$this->load->model('Transporter_model');
	}
	/*
		* Listing of transporter
	*/
	public function get_all_post() {
		try {
			$data['transporter'] = $this->Transporter_model->get_all_transporter();
			if ($data['transporter'] && $data['transporter'] != null) {
				$transporter_ar = array();
				foreach ($data['transporter'] as $t) {
					$t_ar = array();
					$t_ar['id'] = $t['id'];
					$t_ar['transporter_name'] = $t['transporter_name'];
					$t_ar['company_name'] = $t['company_name'];
					$t_ar['address'] = $t['address'];
					$t_ar['contact_person_name'] = $t['contact_person_name'];
					$t_ar['contact_person_number'] = $t['contact_person_number'];
					$t_ar['isActive'] = $t['isActive'];
					$t_ar['company_id'] = $t['company_id'];
					$t_ar['created_at'] = $t['created_at'];
					$t_ar['updated_at'] = $t['updated_at'];
					$transporter_ar[] = $t_ar;
				}
				$response = array(
					'status' => 200,
					'message' => 'get all data Succesfully',
					'data' => $transporter_ar,
				);
				$this->response($response, REST_Controller::HTTP_OK);
			} else {
				$response = array(
					'status' => 400,
					'message' => 'Detail is not found',
				);
				$this->response($response, REST_Controller::HTTP_OK);
			}
		} catch (Exception $ex) {
			throw new Exception('Transporter controller_name : Error in get_all_post function - ' . $ex);
		}
	}
	/*
		  * Adding a new transporter
	*/
	function addnew_post() {

		extract($_POST);

		try {
			$params = array(
				'owner_name' => $this->input->post('owner_name'),
				'address' => $this->input->post('address'),
				'contact_person_name' => $this->input->post('contact_person_name'),
				'contact_person_number' => $this->input->post('contact_person_number'),
				'pan_number' => $this->input->post('pan_number'),
				'gst_number' => $this->input->post('gst_number'),
				'account_holder_name' => $this->input->post('account_holder_name'),
				'account_number' => $this->input->post('account_number'),
				'ifsc' => $this->input->post('ifsc'),

				// 'isActive' => $this->input->post('isActive'),
				// 'company_id' => $this->input->post('company_id'),
				// 'created_at' => $this->input->post('created_at'),
				// 'updated_at' => $this->input->post('updated_at'),
			);
			$this->load->library('upload');
			$this->load->library('form_validation');
			if (isset($_POST) && count($_POST) > 0) {

				$this->db->insert('vehicle_owner', $params);
				$id = $this->db->insert_id();

				for ($i = 0; $i < count($vehicle_no); $i++) {

					// $params = array(
					// 	'vehicle_no' => $vehicle_no[$i],
					// 	'name' => $driver_name[$i],
					// 	'license_number' => $licence_no[$i],
					// 	'contact_number' => $contact_number[$i],
					// 	'transporter_id' => $id,
					// );
					// $this->db->insert('driver', $params);

					$vehicle = array(
						'vehicle_number' => $vehicle_no[$i],
						//'rc_book' => $rcbook[$i],
						'vehicle_owner_id' => $id,
					);
					$this->db->insert('vehicle', $vehicle);

				}

				$data['transporter'] = $this->Transporter_model->get_transporter($id);
				$response = array(
					'status' => 200,
					'message' => 'Succesfully Added',
					'data' => $data,
				);
				$this->response($response, REST_Controller::HTTP_OK);
			} else {
				$response = array(
					'status' => 400,
					'message' => 'Not Added try again',
					'data' => '',
				);
				$this->response($response, REST_Controller::HTTP_OK);
			}
		} catch (Exception $ex) {
			throw new Exception('Transporter controller_name : Error in new transporter function - ' . $ex);
		}
	}

	public function transporterList_post() {
		$postData = $this->input->post();
		$data = $this->Transporter_model->transporterList($postData);
		echo json_encode($data);
	}
	function gettransporter_post() {
		extract($_POST);
		$data = $this->Transporter_model->get_transporter($id);
		if (count($data) != '0') {
			$response = array(
				'success' => true,
				'message' => 'Record Not Found',
				'data' => $data,
			);
			$this->response($response, REST_Controller::HTTP_OK);
		} else {
			$response = array(
				'success' => flase,
				'message' => 'Record Not Found',
				'data' => $id,
			);
			$this->response($response, REST_Controller::HTTP_OK);
		}
	}
	function edit_post($id) {
		try {
			$data['transporter'] = $this->Transporter_model->get_transporter($id);
			$this->load->library('upload');
			$this->load->library('form_validation');
			if (isset($data['transporter']['id'])) {
				$params = array(
					'transporter_name' => $this->input->post('transporter_name'),
					'company_name' => $this->input->post('company_name'),
					'address' => $this->input->post('address'),
					'contact_person_name' => $this->input->post('contact_person_name'),
					'contact_person_number' => $this->input->post('contact_person_number'),
					'isActive' => $this->input->post('isActive'),
					'company_id' => $this->input->post('company_id'),
					'created_at' => $this->input->post('created_at'),
					'updated_at' => $this->input->post('updated_at'),
				);
				if (isset($_POST) && count($_POST) > 0) {
					$this->Transporter_model->update_transporter($id, $params);
					$response = array(
						'status' => 200,
						'message' => 'Succesfully Updated',
						'data' => $id,
					);
					$this->response($response, REST_Controller::HTTP_OK);
				} else {
					$response = array(
						'status' => 400,
						'message' => 'Not Updated Try again',
						'data' => $id,
					);
					$this->response($response, REST_Controller::HTTP_OK);
				}
			}
		} catch (Exception $ex) {
			throw new Exception('Transporter controller_name : Error in edit_post function - ' . $ex);
		}
	}
/*
 * Deleting transporter
 */
	function remove_post($id) {
		try {
			$transporter = $this->Transporter_model->get_transporter($id);
			// check if the transporter exists before trying to delete it
			if (isset($transporter['id'])) {
				$this->Transporter_model->delete_transporter($id);
				$response = array(
					'status' => 200,
					'message' => 'Succesfully Removed',
					'data' => $id,
				);
				$this->response($response, REST_Controller::HTTP_OK);
			} else {
				$response = array(
					'status' => 400,
					'message' => 'Not Updated Try again',
					'data' => $id,
				);
			}

			$this->response($response, REST_Controller::HTTP_OK);
		} catch (Exception $ex) {
			throw new Exception('Transporter controller_name : Error in remove_post function - ' . $ex);
		}
	}
}
