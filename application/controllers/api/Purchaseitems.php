<?php 
/*
    Generated by Manuigniter v2.0 
    www.manuigniter.com
*/
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');
require APPPATH . '/libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';
class Purchaseitems extends REST_Controller{
 function __construct()
 {
       parent::__construct();
      $this->load->model('Purchaseitems_model');
 } 
 /*
* Listing of purchaseitems
 */
public function get_all_post()
{
  try{
  $data['purchaseitems'] = $this->Purchaseitems_model->get_all_purchaseitems();
     if($data['purchaseitems'] && $data['purchaseitems']!=null){
       $purchaseitems_ar = array();
       foreach($data['purchaseitems'] as $p)
       {
       $p_ar = array();
       $p_ar['id'] = $p['id'];
       $p_ar['purchase_id'] = $p['purchase_id'];
       $p_ar['purchase_status'] = $p['purchase_status'];
       $p_ar['item_id'] = $p['item_id'];
       $p_ar['unit_id'] = $p['unit_id'];
       $p_ar['weight'] = $p['weight'];
       $p_ar['rate'] = $p['rate'];
       $p_ar['total_cost'] = $p['total_cost'];
       $p_ar['status'] = $p['status'];
       $purchaseitems_ar[] = $p_ar;
       }
       $response = array(
       'status' => 200,
       'message' => 'get all data Succesfully',
       'data' => $purchaseitems_ar,
       );
       $this->response($response, REST_Controller::HTTP_OK);
     }
     else{
       $response = array(
      'status' => 400,
      'message' => 'Detail is not found'
        );
       $this->response($response, REST_Controller::HTTP_OK); 
        }
       } catch (Exception $ex) {
             throw new Exception('Purchaseitems controller_name : Error in get_all_post function - ' . $ex);
        }  
}
 /*
  * Adding a new purchaseitems
  */
 function addnew_post()
 {  
  try{
      $params = array(
       'purchase_id'=> $this->input->post('purchase_id'),
       'purchase_status'=> $this->input->post('purchase_status'),
       'item_id'=> $this->input->post('item_id'),
       'unit_id'=> $this->input->post('unit_id'),
       'weight'=> $this->input->post('weight'),
       'rate'=> $this->input->post('rate'),
       'total_cost'=> $this->input->post('total_cost'),
       'status'=> $this->input->post('status'),
        );
       $this->load->library('upload');
       $this->load->library('form_validation');
       if(isset($_POST) && count($_POST) > 0)     
        {  
            $id= $this->Purchaseitems_model->add_purchaseitems($params);
   $data['purchaseitems'] = $this->Purchaseitems_model->get_purchaseitems($id);
           $response = array(
            'status' => 200,
            'message' => 'Succesfully Added',
            'data' => $data
             );
           $this->response($response, REST_Controller::HTTP_OK);
        }
        else
        { 
           $response = array(
            'status' => 400,
            'message' => 'Not Added try again',
            'data' => ''
             );
           $this->response($response, REST_Controller::HTTP_OK);
        }
       } catch (Exception $ex) {
             throw new Exception('Purchaseitems controller_name : Error in new purchaseitems function - ' . $ex);
       }  
 }  
  /*
  * Editing a purchaseitems
 */
  function edit_post($id)
 {   
  try{
   $data['purchaseitems'] = $this->Purchaseitems_model->get_purchaseitems($id);
       $this->load->library('upload');
       $this->load->library('form_validation');
     if(isset($data['purchaseitems']['id']))
      {
        $params = array(
           'purchase_id'=> $this->input->post('purchase_id'),
           'purchase_status'=> $this->input->post('purchase_status'),
           'item_id'=> $this->input->post('item_id'),
           'unit_id'=> $this->input->post('unit_id'),
           'weight'=> $this->input->post('weight'),
           'rate'=> $this->input->post('rate'),
           'total_cost'=> $this->input->post('total_cost'),
           'status'=> $this->input->post('status'),
        );
          if(isset($_POST) && count($_POST) > 0)     
           {  
           $this->Purchaseitems_model->update_purchaseitems($id,$params);
           $response = array(
            'status' => 200,
            'message' => 'Succesfully Updated',
            'data' => $id
             );
           $this->response($response, REST_Controller::HTTP_OK);
           }
           else
          {
           $response = array(
            'status' => 400,
            'message' => 'Not Updated Try again',
            'data' => $id
             );
           $this->response($response, REST_Controller::HTTP_OK);
          }
  }
       } catch (Exception $ex) {
             throw new Exception('Purchaseitems controller_name : Error in edit_post function - ' . $ex);
        }  
} 
/*
  * Deleting purchaseitems
  */
  function remove_post($id)
   {
  try{
      $purchaseitems = $this->Purchaseitems_model->get_purchaseitems($id);
  // check if the purchaseitems exists before trying to delete it
       if(isset($purchaseitems['id']))
       {
         $this->Purchaseitems_model->delete_purchaseitems($id);
           $response = array(
            'status' => 200,
            'message' => 'Succesfully Removed',
            'data' => $id
             );
           $this->response($response, REST_Controller::HTTP_OK);
       }
       else
           $response = array(
            'status' => 400,
            'message' => 'Not Updated Try again',
            'data' => $id
             );
           $this->response($response, REST_Controller::HTTP_OK);
       } catch (Exception $ex) {
             throw new Exception('Purchaseitems controller_name : Error in remove_post function - ' . $ex);
        }  
  }
 }
